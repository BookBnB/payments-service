diff --git a/features/doubles/MonitorFake.ts b/features/doubles/MonitorFake.ts
new file mode 100644
index 0000000..29d924d
--- /dev/null
+++ b/features/doubles/MonitorFake.ts
@@ -0,0 +1,7 @@
+import { Application } from "express";
+import { IMetricMonitor } from "../../src/app/metrics/MetricMonitor";
+
+export default class MonitorFake implements IMetricMonitor {
+    monitor(app: Application): void {
+    }
+}
diff --git a/features/doubles/TestRegistry.ts b/features/doubles/TestRegistry.ts
index e90fad2..216a2c4 100644
--- a/features/doubles/TestRegistry.ts
+++ b/features/doubles/TestRegistry.ts
@@ -2,11 +2,13 @@ import Registry from "../../src/infra/container/registerTypes";
 import IReloj from "../../src/domain/common/servicios/Reloj";
 import {DIContainer} from "@wessberg/di";
 import IServicioPagos from "../../src/domain/common/servicios/ServicioPagos";
+import { IMetricMonitor } from "../../src/app/metrics/MetricMonitor";
 
 export default class TestRegistry extends Registry {
     constructor(
         private readonly reloj: IReloj,
-        private readonly mockServicioPagos: IServicioPagos
+        private readonly mockServicioPagos: IServicioPagos,
+        private readonly mockMonitor: IMetricMonitor
     ) {
         super();
     }
@@ -18,5 +20,9 @@ export default class TestRegistry extends Registry {
     protected async registrarServicioPagos(container: DIContainer) {
         container.registerSingleton<IServicioPagos>(() => this.mockServicioPagos)
     }
+
+    protected async registrarMetricas(container: DIContainer) {
+        container.registerSingleton<IMetricMonitor>(() => this.mockMonitor)
+    }
 }
 
diff --git a/features/hooks.ts b/features/hooks.ts
index d97290a..f1656eb 100644
--- a/features/hooks.ts
+++ b/features/hooks.ts
@@ -14,6 +14,7 @@ import {setupServer} from "msw/node";
 import {buildHandlers} from "./doubles/handlers";
 import ServicioPagos from "../src/infra/servicios/ServicioPagos";
 import sinon from 'sinon';
+import MonitorFake from './doubles/MonitorFake';
 
 dotenvExpand(dotenv.config({path: 'features/.env'}))
 
@@ -50,6 +51,7 @@ Before(async function () {
 
     this.reloj = new RelojFake()
     this.mockServer = mockServer
+    this.monitor = new MonitorFake()
 
     this.servicioPagos = new ServicioPagos(<string>process.env.PAYMENTS_SERVICE_URL);
     sinon.spy(this.servicioPagos)
@@ -57,7 +59,8 @@ Before(async function () {
     this.container = new DIContainer()
     await new TestRegistry(
         this.reloj,
-        this.servicioPagos
+        this.servicioPagos,
+        this.monitor
     ).registrar(this.container)
     this.app = await app(this.container)
 });
diff --git a/src/app/index.ts b/src/app/index.ts
index 022db54..3d066e2 100644
--- a/src/app/index.ts
+++ b/src/app/index.ts
@@ -8,7 +8,7 @@ import Api from "./Api";
 import OpenApiSpec from "./OpenApiSpec";
 import {IContainer} from "../infra/container/Container";
 import apiMetrics, { ApiMetricsOpts } from "prometheus-api-metrics";
-import PrometheusMiddleware from "./PrometheusMiddleware";
+import { IMetricMonitor } from "./metrics/MetricMonitor";
 
 export default async (container: IContainer): Promise<Application> => {
     const app = express();
@@ -29,7 +29,9 @@ export default async (container: IContainer): Promise<Application> => {
     })
     new UsersServiceProxy({app, logger})
     new HTTPErrorHandlerLogger({app, logger})
-    new PrometheusMiddleware(app)
+
+    const monitor = container.get<IMetricMonitor>({ identifier: "IMetricMonitor" })
+    monitor.monitor(app)
 
     return app
 }
diff --git a/src/app/metrics/MetricMonitor.ts b/src/app/metrics/MetricMonitor.ts
new file mode 100644
index 0000000..60b752a
--- /dev/null
+++ b/src/app/metrics/MetricMonitor.ts
@@ -0,0 +1,5 @@
+import { Application } from "express";
+
+export interface IMetricMonitor {
+    monitor(app: Application): void
+}
\ No newline at end of file
diff --git a/src/app/PrometheusMiddleware.ts b/src/app/metrics/PrometheusMonitor.ts
similarity index 57%
rename from src/app/PrometheusMiddleware.ts
rename to src/app/metrics/PrometheusMonitor.ts
index 3926c3e..06fb9e8 100644
--- a/src/app/PrometheusMiddleware.ts
+++ b/src/app/metrics/PrometheusMonitor.ts
@@ -1,10 +1,11 @@
 import { Application } from "express";
 import apiMetrics from "prometheus-api-metrics";
+import { IMetricMonitor } from "./MetricMonitor";
 
-export default class PrometheusMiddleware {
-    public constructor(app: Application) {
+export class PrometheusMonitor implements IMetricMonitor {
+    public monitor(app: Application): void {
         app.use(apiMetrics({
             metricsPath: process.env.PROM_METRICS_PATH || "/v1/metricas"
         }))
     }
-}
+}
\ No newline at end of file
diff --git a/src/infra/container/registerTypes.ts b/src/infra/container/registerTypes.ts
index 7474b41..b86fc9c 100644
--- a/src/infra/container/registerTypes.ts
+++ b/src/infra/container/registerTypes.ts
@@ -56,6 +56,8 @@ import {CrearUsuario} from "../../domain/usuarios/casos-uso/CrearUsuario";
 import {ConfirmarRechazoPublicacion} from "../../domain/publicaciones/casos-uso/ConfirmarRechazoPublicacion";
 import {ConfirmarRechazoReserva} from "../../domain/reservas/casos-uso/ConfirmarRechazoReserva";
 import {RechazarReserva} from "../../domain/reservas/casos-uso/RechazarReserva";
+import { IMetricMonitor } from "../../app/metrics/MetricMonitor";
+import { PrometheusMonitor } from "../../app/metrics/PrometheusMonitor";
 
 /**
  * Registra las relaciones entre las abstracciones y las clases
@@ -79,6 +81,7 @@ export default class Registry {
         await this.registrarUsuarios(container)
         await this.registrarEventos(container)
         await this.registrarServicioPagos(container)
+        await this.registrarMetricas(container)
         return container
     }
 
@@ -187,4 +190,8 @@ export default class Registry {
         const servicioPagos = new ServicioPagos(<string>process.env.PAYMENTS_SERVICE_URL);
         container.registerSingleton<IServicioPagos>(() => servicioPagos);
     }
+
+    protected async registrarMetricas(container: DIContainer) {
+        container.registerSingleton<IMetricMonitor>(() => new PrometheusMonitor())
+    }
 }
